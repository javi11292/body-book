{"version":3,"sources":["components/Notifications/useLogic.js","components/Notifications/styled.js","components/Notifications/index.js","components/App/useLogic.js","components/App/styled.js","components/Main/useLogic.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js","libraries/store.js","hooks/useStore.js","libraries/fetch.js","libraries/socket.js"],"names":["useLogic","useState","open","setOpen","useStore","notifications","setNotifications","useEffect","length","notification","handleClose","handleExited","action","SnackbarContent","styled","variant","props","theme","backgroundColor","palette","error","dark","primary","React","memo","Snackbar","onClose","onExited","autoHideDuration","type","message","value","update","setUpdate","callback","detail","postMessage","window","location","reload","addEventListener","removeEventListener","shouldUpdate","Box","height","width","position","history","useHistory","user","setUser","sessionStorage","getItem","push","removeItem","a","get","checkSession","login","register","home","Login","lazy","Register","Home","path","to","createMuiTheme","App","CssBaseline","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","basename","process","fallback","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","checkValidServiceWorker","dispatchEvent","CustomEvent","waiting","getStore","store","listeners","key","this","forEach","addListener","Set","add","removeListener","delete","subscribe","useReducer","forceUpdate","useCallback","field","reducer","undefined","contacts","activeChat","chats","Array","reduce","acc","entry","JSON","parse","from","date","id","userChats","received","socket","emit","slice","HOST","post","body","credentials","method","stringify","ok","statusText","text","host","io","transports","autoConnect"],"mappings":"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","file":"static/js/main.ed1e4254.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\nimport useStore from \"hooks/useStore\"\n\nfunction useLogic() {\n  const [open, setOpen] = useState(false)\n  const [notifications, setNotifications] = useStore(\"notifications\")\n\n  useEffect(() => {\n    setOpen(notifications.length > 0)\n  }, [notifications])\n\n  function handleClose() {\n    setOpen(false)\n  }\n\n  function handleExited() {\n    setNotifications({ action: \"remove\" })\n  }\n\n  return { notification: notifications[0], handleClose, handleExited, open }\n}\n\nexport default useLogic","import React from \"react\"\nimport { styled, SnackbarContent as CoreSnackbarContent } from \"@material-ui/core\"\n\n/**\n * @typedef {Object} SnackbarContentProps\n * @property {\"error\" | \"message\"} variant\n */\n\nexport const SnackbarContent = styled(\n  /**\n   * @param {import(\"@material-ui/core/SnackbarContent\").SnackbarContentProps & SnackbarContentProps} props \n   */\n  function SnackbarContent({ variant, ...props }) {\n    return <CoreSnackbarContent {...props} />\n  }\n)(({ theme, variant = \"message\" }) => ({\n  backgroundColor: variant === \"error\" ? theme.palette.error.dark : theme.palette.primary.dark\n})) ","import React from \"react\"\nimport { Snackbar } from \"@material-ui/core\"\nimport useLogic from \"./useLogic\"\nimport { SnackbarContent } from \"./styled\"\n\nfunction Notifications() {\n  const { notification = {}, handleClose, handleExited, open } = useLogic()\n\n  return (\n    <Snackbar\n      open={open}\n      onClose={handleClose}\n      onExited={handleExited}\n      autoHideDuration={2000}>\n      <SnackbarContent\n        variant={notification.type}\n        message={notification.value} />\n    </Snackbar>\n  )\n}\n\nexport default React.memo(Notifications)","import { useState, useEffect } from \"react\"\n\nfunction useLogic() {\n  const [update, setUpdate] = useState()\n\n  useEffect(() => {\n    function callback({ detail }) {\n      setUpdate(() => () => {\n        detail.postMessage({ type: \"SKIP_WAITING\" })\n        window.location.reload()\n      })\n    }\n\n    window.addEventListener(\"update\", callback)\n\n    return () => window.removeEventListener(\"update\", callback)\n  }, [])\n\n  function handleClose(shouldUpdate) {\n    return () => {\n      if (shouldUpdate) {\n        update()\n      } else {\n        setUpdate()\n      }\n    }\n  }\n\n  return { update, handleClose }\n}\n\nexport default useLogic","import { styled } from \"@material-ui/core\"\n\nexport const Box = styled(\"div\")({\n  height: \"100%\",\n  width: \"100%\",\n  position: \"absolute\",\n})","import { useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { get } from \"libraries/fetch\"\nimport useStore from \"hooks/useStore\"\n\nfunction useLogic() {\n  const history = useHistory()\n  const [user, setUser] = useStore(\"user\")\n\n  useEffect(() => {\n    const location = sessionStorage.getItem(\"location\")\n    if (location) {\n      history.push(location)\n      sessionStorage.removeItem(\"location\")\n    }\n  }, [history])\n\n  useEffect(() => {\n    async function checkSession() {\n      const { message } = await get(\"/status\")\n      setUser(message || null)\n    }\n\n    checkSession()\n\n    function callback({ detail }) {\n      setUser(detail)\n    }\n\n    window.addEventListener(\"status\", callback)\n\n    return () => window.removeEventListener(\"status\", callback)\n  }, [setUser])\n\n  return { user }\n}\n\nexport default useLogic","import React from \"react\"\nimport { Switch, Route, Redirect } from \"react-router-dom\"\nimport useLogic from \"./useLogic\"\n\nconst login = import(\"pages/Login\")\nconst register = import(\"pages/Register\")\nconst home = import(\"pages/Home\")\n\nconst Login = React.lazy(() => login)\nconst Register = React.lazy(() => register)\nconst Home = React.lazy(() => home)\n\nfunction Main() {\n  const { user } = useLogic()\n\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        {user && <Redirect to=\"/\" />}\n        <Login />\n      </Route>\n      <Route path=\"/register\">\n        {user && <Redirect to=\"/\" />}\n        <Register />\n      </Route>\n      <Route>\n        {user === null && <Redirect to=\"/login\" />}\n        <Home />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default React.memo(Main)","import React, { Suspense } from \"react\"\nimport {\n  createMuiTheme,\n  MuiThemeProvider,\n  CssBaseline,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n} from \"@material-ui/core\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport Notifications from \"components/Notifications\"\nimport useLogic from \"./useLogic\"\nimport { Box } from \"./styled\"\nimport Main from \"components/Main\"\n\nconst theme = createMuiTheme()\n\nfunction App() {\n  const { update, handleClose } = useLogic()\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Dialog onClose={handleClose} open={!!update}>\n        <DialogTitle>Nueva versión disponible</DialogTitle>\n\n        <DialogContent>\n          <DialogContentText>Pulsa \"Actualizar\" para aplicar los cambios</DialogContentText>\n        </DialogContent>\n\n        <DialogActions>\n          <Button onClick={handleClose(false)} color=\"secondary\">Cancelar</Button>\n          <Button onClick={handleClose(true)} color=\"primary\">Actualizar</Button>\n        </DialogActions>\n      </Dialog>\n\n      <Notifications />\n\n      <Box>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Suspense fallback={null}>\n            <Main />\n          </Suspense>\n        </BrowserRouter>\n      </Box>\n    </MuiThemeProvider>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"components/App\"\nimport * as serviceWorker from \"serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nfunction onUpdate(registration) {\n  window.dispatchEvent(new CustomEvent(\"update\", { detail: registration.waiting }))\n}\n\nserviceWorker.register({ onUpdate })","import { useReducer, useEffect, useCallback } from \"react\"\n\nfunction getStore(state) {\n  const store = {\n    state,\n    listeners: {},\n\n    update(key, value) {\n      if (this.state[key].value === value) return\n      this.state[key].value = value\n      if (this.listeners[key]) this.listeners[key].forEach(callback => callback())\n    },\n\n    addListener(key, callback) {\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set()\n      }\n      this.listeners[key].add(callback)\n    },\n\n    removeListener(key, callback) {\n      this.listeners[key].delete(callback)\n    },\n  }\n\n  return (key, subscribe = true) => {\n    const [, forceUpdate] = useReducer(state => !state, false)\n\n    useEffect(() => {\n      if (!subscribe) return\n      store.addListener(key, forceUpdate)\n      return () => store.removeListener(key, forceUpdate)\n    }, [key, subscribe])\n\n    const update = useCallback(value => {\n      const field = store.state[key]\n      store.update(key, field.reducer(field.value, value))\n    }, [key])\n\n    return subscribe ? [store.state[key].value, update] : update\n  }\n}\n\nexport default getStore","import getStore from \"libraries/store\"\nimport socket from \"libraries/socket\"\n\nconst store = {\n  user: {\n    value: undefined,\n    reducer: (state, value) => value,\n  },\n  contacts: {\n    value: undefined,\n    reducer: (state, value) => value,\n  },\n  activeChat: {\n    value: {},\n    reducer: (state, value) => value,\n  },\n  chats: {\n    value: {},\n    reducer: (state, { user, message }) => {\n      const entries = message instanceof Array ? message : [message]\n\n      function addEntry(acc, entry) {\n        const message = typeof entry === \"string\" ? JSON.parse(entry) : entry\n        const { to, from, date } = message\n        const id = from === user ? to : from\n        const userChats = acc[id] || {}\n\n        if (from !== user && !message.received) socket.emit(\"received\", message)\n\n        return {\n          ...acc,\n          [id]: {\n            ...userChats,\n            [date]: message,\n          },\n        }\n      }\n\n      return entries.reduce(addEntry, state)\n    },\n  },\n  notifications: {\n    value: [],\n    reducer: (state, { action, value, type }) => {\n      switch (action) {\n        case \"add\":\n          return [...state, { value, type }]\n        case \"remove\":\n          return state.slice(0, -1)\n        default:\n          return state\n      }\n    },\n  }\n}\n\nexport default getStore(store)","const HOST = process.env[process.env.NODE_ENV === \"development\" ? \"REACT_APP_SERVER_DEV\" : \"REACT_APP_SERVER\"]\n\nexport async function post(path, body) {\n  try {\n    const response = await fetch(`${HOST}${path}`, {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n\n    if (!response.ok) return { error: response.statusText }\n\n    const text = await response.text()\n    try {\n      return JSON.parse(text)\n    } catch {\n      return text\n    }\n  } catch (error) {\n    return { error: error.message }\n  }\n}\n\nexport async function get(path) {\n  try {\n    const response = await fetch(`${HOST}${path}`, {\n      credentials: \"include\",\n    })\n\n    if (!response.ok) return { error: response.statusText }\n\n    const text = await response.text()\n    try {\n      return JSON.parse(text)\n    } catch {\n      return text\n    }\n  } catch (error) {\n    return { error: error.message }\n  }\n}","import io from \"socket.io-client\"\n\nconst host = process.env[process.env.NODE_ENV === \"development\" ? \"REACT_APP_SERVER_DEV\" : \"REACT_APP_SERVER\"]\n\nconst socket = io(host, { transports: [\"websocket\"], autoConnect: false })\n\nexport default socket"],"sourceRoot":""}