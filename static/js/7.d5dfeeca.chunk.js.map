{"version":3,"sources":["components/TextField/index.js","components/Button/index.js","components/index.js","components/Chat/styled.js","hooks/useUserChats.js","components/Chat/useLogic.js","components/Chat/index.js","components/Contacts/styled.js","components/Contacts/useLogic.js","components/Contacts/index.js","pages/Home/styled.js","pages/Home/useLogic.js","pages/Home/index.js"],"names":["React","memo","props","variant","color","Container","styled","height","width","display","gridTemplateRows","Input","TextField","margin","Box","overflowY","wordBreak","flexDirection","DoneIcon","read","received","Done","position","visibility","undefined","gridArea","top","Message","local","Paper","borderRadius","padding","alignSelf","backgroundColor","Info","bottom","right","fontSize","InfoPlaceholder","IconContainer","gridTemplateAreas","marginLeft","useUserChats","useStore","chats","activeChat","useMemo","Object","values","username","useLogic","chatRef","useRef","scrolled","useState","message","setMessage","setChat","user","userChats","useEffect","forEach","chat","to","socket","emit","useLayoutEffect","current","scrollTop","scrollHeight","offsetHeight","handleScroll","currentTarget","handleKeyDown","key","handleChange","target","value","onScroll","ref","map","index","from","date","format","addMessage","autoComplete","label","onChange","onKeyDown","ListItemText","CoreListItemText","overflow","contacts","setContacts","setActiveChat","newChats","setNewChats","entries","reduce","acc","last","size","a","get","fetchContacts","selectContact","open","dataset","List","ListItem","button","onClick","data-value","primary","secondary","ListItemSecondaryAction","Chip","addContact","theme","Icon","IconButton","marginRight","addChat","connect","on","off","disconnect","closeChat","Title","children","Typography","AppBar","Toolbar","edge","ArrowBack"],"mappings":"2IAUeA,UAAMC,MAJrB,SAAmBC,GACjB,OAAO,kBAAC,IAAD,eAAeC,QAAQ,UAAaD,O,SCG9BF,UAAMC,MAJrB,SAAgBC,GACd,OAAO,kBAAC,IAAD,eAAYE,MAAM,WAAcF,OCPzC,qE,qJCKaG,EAAYC,YAAO,MAAPA,CAAc,CACrCC,OAAQ,OACRC,MAAO,OACPC,QAAS,OACTC,iBAAkB,aAGPC,EAAQL,YAAOM,IAAPN,CAAkB,CACrCO,OAAQ,WAGGC,EAAMR,YAAO,MAAPA,CAAc,CAC/BS,UAAW,OACXC,UAAW,aACXP,QAAS,OACTQ,cAAe,SACfJ,OAAQ,YAGGK,EAAWZ,aAItB,YAAgD,EAA5Ba,KAA4B,EAAtBC,SAAuB,IAAVlB,EAAS,mCAC9C,OAAO,kBAACmB,EAAA,EAASnB,KALGI,EAOtB,gBAAGa,EAAH,EAAGA,KAAH,MAAyB,CACzBG,SAAU,WACVC,WAFA,EAASH,WAEyB,IAATD,OAA4BK,EAAX,SAC1CC,SAAU,OACVC,IAAKP,EAAO,eAAYK,MAGbG,EAAUrB,aAIrB,YAAsC,EAAnBsB,MAAoB,IAAV1B,EAAS,yBACpC,OAAO,kBAAC2B,EAAA,EAAU3B,KALCI,EAOrB,gBAAGsB,EAAH,EAAGA,MAAH,MAAgB,CAChBN,SAAU,WACVQ,aAAc,OACdrB,QAAS,SACTI,OAAQ,UACRkB,QAAS,OACTC,UAAWJ,EAAQ,WAAa,aAChCK,gBAAiBL,EAAQ,UAAY,cAG1BM,EAAO5B,YAAO,OAAPA,CAAe,CACjCgB,SAAU,WACVa,OAAQ,SACRC,MAAO,UACPC,SAAU,UACVjC,MAAO,SAGIkC,EAAkBhC,YAAO,OAAPA,CAAe,CAC5CE,MAAO,SACPC,QAAS,iBAGE8B,EAAgBjC,YAAO,OAAPA,CAAe,CAC1CgB,SAAU,WACVb,QAAS,cACT+B,kBAAmB,OACnBC,WAAY,W,wBC9DCC,MAPf,WAAyB,IAAD,EACNC,YAAS,SAAlBC,EADe,sBAEDD,YAAS,cAAvBE,EAFe,oBAItB,OAAOC,mBAAQ,kBAAMC,OAAOC,OAAOJ,EAAMC,EAAWI,WAAa,MAAK,CAACL,EAAOC,KC6CjEK,MA/Cf,WACE,IAAMC,EAAUC,mBACVC,EAAWD,kBAAO,GAFN,EAGYE,mBAAS,IAHrB,mBAGXC,EAHW,KAGFC,EAHE,OAIGb,YAAS,cAAvBE,EAJW,oBAKZY,EAAUd,YAAS,SAAS,GALhB,EAMHA,YAAS,QAAjBe,EANW,oBAOZC,EAAYjB,IA6BlB,OA3BAkB,qBAAU,WACRD,EAAUE,SAAQ,SAAAC,GACZA,EAAK1C,WAAa0C,EAAK3C,MAAQuC,IAASI,EAAKC,IAC/CC,IAAOC,KAAK,OAAQH,QAGvB,CAACH,EAAWF,EAASC,IAExBQ,2BAAgB,WACTb,EAASc,UAAShB,EAAQgB,QAAQC,UAAYjB,EAAQgB,QAAQE,aAAelB,EAAQgB,QAAQG,gBACjG,CAACX,IAiBG,CACLD,OACAa,aANF,YAAqF,IAAD,IAA5DC,cAAiBH,EAA2C,EAA3CA,aAAcD,EAA6B,EAA7BA,UAAWE,EAAkB,EAAlBA,aAChEjB,EAASc,QAAUC,IAAcC,EAAeC,GAMhDnB,UACAsB,cAnBF,YAAiC,IAARC,EAAO,EAAPA,IACnBnB,GAAmB,UAARmB,IACbV,IAAOC,KAAK,UAAW,CAAEF,GAAIlB,EAAWI,SAAUM,YAClDC,EAAW,MAiBbD,UACAoB,aAdF,YAAmC,IAAXC,EAAU,EAAVA,OACtBpB,EAAWoB,EAAOC,QAclBf,KAAMH,ICOK3D,UAAMC,MA9BrB,WAAiB,IAAD,EASViD,IAPFQ,EAFY,EAEZA,KACAa,EAHY,EAGZA,aACApB,EAJY,EAIZA,QACAsB,EALY,EAKZA,cACAlB,EANY,EAMZA,QACAoB,EAPY,EAOZA,aACAb,EARY,EAQZA,KAGF,OACE,kBAACzD,EAAD,KACE,kBAACS,EAAD,CACEgE,SAAUP,EACVQ,IAAK5B,GACJW,EAAKkB,IApCd,SAAoBtB,GAClB,OAAO,WAA0CuB,GAAW,IAAlDC,EAAiD,EAAjDA,KAAM3B,EAA2C,EAA3CA,QAASnC,EAAkC,EAAlCA,SAAUD,EAAwB,EAAxBA,KAAMgE,EAAkB,EAAlBA,KACvC,OACE,kBAAC,EAAD,CACEvD,MAAOsD,IAASxB,EAChBgB,IAAKO,GACJ1B,EACD,kBAACjB,EAAD,MACA,kBAACJ,EAAD,KACGkD,YAAOD,EAAM,SACd,kBAAC5C,EAAD,KACGmB,IAASwB,GAAQ,kBAAC,EAAD,CAAU7C,SAAS,UAAUjB,SAAUA,IACxDsC,IAASwB,GAAQ,kBAAC,EAAD,CAAU7C,SAAS,UAAUjB,SAAUA,EAAUD,KAAMA,QAwBnEkE,CAAW3B,KAEvB,kBAAC/C,EAAD,CACE2E,aAAa,MACbC,MAAM,UACN1E,OAAO,SACPV,QAAQ,WACR0E,MAAOtB,EACPiC,SAAUb,EACVc,UAAWhB,Q,SC/CNpE,EAAYC,YAAO,MAAPA,CAAc,CACrCC,OAAQ,OACRC,MAAO,SAGIkF,EAAepF,YAAOqF,IAAPrF,CAAyB,CACnDsF,SAAU,W,kmBCuCG1C,MA5Cf,WAAqB,IAAD,EACcP,YAAS,YADvB,mBACXkD,EADW,KACDC,EADC,OAEkBnD,YAAS,cAF3B,mBAEXE,EAFW,KAECkD,EAFD,OAGFpD,YAAS,SAAlBC,EAHW,sBAIHD,YAAS,QAAjBe,EAJW,sBAKcJ,mBAAS,IALvB,mBAKX0C,EALW,KAKDC,EALC,KAyClB,OAlCArC,qBAAU,WACR,IAAMoC,EAAWjD,OACdmD,QAAQtD,GACRuD,QAAO,SAACC,EAAD,GAA4B,IAAD,mBAApB1B,EAAoB,KAAff,EAAe,KAC3Bf,EAAQG,OAAOC,OAAOW,GAAWwC,QAAO,SAACC,EAAKtC,GAClD,OAAIJ,IAASI,EAAKoB,MAAQpB,EAAK3C,KAAa,EAAP,GAAYiF,EAAZ,CAAiBC,KAAMvC,EAAKP,UAC1D,CACL8C,KAAMvC,EAAKP,QACX+C,KAAMF,EAAIE,KAAO,KAElB,CAAEA,KAAM,IAEX,OAAO,EAAP,GACKF,EADL,eAEG1B,EAAM9B,MAER,IAELqD,EAAYD,KACX,CAACpD,EAAOc,IAEXE,qBAAU,WAAM,4CACd,8BAAA2C,EAAA,sEAC4BC,YAAI,kBADhC,gBACUjD,EADV,EACUA,QACRuC,EAAYvC,GAFd,4CADc,sBAMTsC,GANU,WAAD,wBAMCY,KACd,CAACZ,EAAUC,IAMP,CAAEjD,aAAY6D,cAJrB,YAA2C,IAAlBlC,EAAiB,EAAjBA,cACvBuB,EAAc,CAAEY,MAAM,EAAM1D,SAAUuB,EAAcoC,QAAQ/B,SAG1BgB,WAAUG,aCJjChG,UAAMC,MAhBrB,WAAqB,IAAD,EACwCiD,IAAlD2C,EADU,EACVA,SAAUa,EADA,EACAA,cAAe7D,EADf,EACeA,WAAYmD,EAD3B,EAC2BA,SAE7C,OACE,kBAAC,EAAD,KACGnD,EAAW8D,KACR,kBAAC,EAAD,MAEA,kBAACE,EAAA,EAAD,KACGhB,GAAYA,EAASb,IA5BlC,YAAkD,IAA5B0B,EAA2B,EAA3BA,cAAeV,EAAY,EAAZA,SACnC,OAAO,YAAmB,IAAhB/C,EAAe,EAAfA,SACFU,EAAYqC,EAAS/C,IAAa,CAAEoD,KAAM,sCAAqBC,KAAM,GAE3E,OACE,kBAACQ,EAAA,EAAD,CACEC,QAAM,EACNC,QAASN,EACTO,aAAYhE,EACZyB,IAAKzB,GACL,kBAAC,EAAD,CAAciE,QAASjE,EAAUkE,UAAWxD,EAAU0C,OACtD,kBAACe,EAAA,EAAD,KACGzD,EAAU2C,KAAO,GAAK,kBAACe,EAAA,EAAD,CAAM9B,MAAO5B,EAAU2C,KAAMlG,MAAM,eAgB9BkH,CAAW,CAAEZ,gBAAeV,mB,4CChCrDlF,EAAMR,YAAO,MAAPA,CAAc,CAC/BC,OAAQ,OACRC,MAAO,OACPc,SAAU,WACVb,QAAS,OACTC,iBAAkB,WAClBkF,SAAU,WAGCvF,EAAYC,YAAO,MAAPA,EAAc,cAAGiH,MAAH,MAAgB,CACrD/G,MAAO,OACPoF,SAAU,WAGC4B,EAAOlH,YAAOmH,IAAPnH,CAAmB,CACrCoH,YAAa,S,8NCWAxE,MAxBf,WAAqB,IAAD,EACkBP,YAAS,cAD3B,mBACXE,EADW,KACCkD,EADD,KAEZ4B,EAAUhF,YAAS,SAAS,GAFhB,EAGHA,YAAS,QAAjBe,EAHW,oBAqBlB,OAhBAE,qBAAU,WAMR,OALAI,IAAO4D,UACP5D,IAAO6D,GAAG,WAAW,SAAAtE,GACnBoE,EAAQ,CAAEjE,OAAMH,eAGX,WACLS,IAAO8D,IAAI,WACX9D,IAAO+D,gBAER,CAACrE,EAAMiE,IAMH,CAAE9E,aAAYmF,UAJrB,WACEjC,E,yVAAc,IAAKlD,EAAN,CAAkB8D,MAAM,QCfzC,SAASsB,EAAT,GAA8B,IAAbC,EAAY,EAAZA,SACf,OAAO,kBAACC,EAAA,EAAD,CAAYhI,QAAQ,MAAM+H,GA8BpBlI,cAAMC,MA3BrB,WAAiB,IAAD,EACoBiD,IAA1BL,EADM,EACNA,WAAYmF,EADN,EACMA,UAEpB,OACE,kBAAC,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQ9G,SAAS,UACf,kBAAC+G,EAAA,EAAD,CAASlI,QAAQ,SACd0C,EAAW8D,KACV,oCACE,kBAACa,EAAD,CACER,QAASgB,EACTM,KAAK,QACLlI,MAAM,WACN,kBAACmI,EAAA,EAAD,OAEF,kBAACN,EAAD,KAAQpF,EAAWI,WAEnB,kBAACgF,EAAD,mBAGR,kBAAC,EAAD,KACE,kBAAC,EAAD","file":"static/js/7.d5dfeeca.chunk.js","sourcesContent":["import React from \"react\"\nimport { TextField as CoreTextField } from \"@material-ui/core\"\n\n/** \n * @param {import(\"@material-ui/core/TextField\").TextFieldProps} props\n */\nfunction TextField(props) {\n  return <CoreTextField variant=\"filled\" {...props} />\n}\n\nexport default React.memo(TextField)","import React from \"react\"\nimport { Button as CoreButton } from \"@material-ui/core\"\n\n/** \n * @param {import(\"@material-ui/core/Button\").ButtonProps} props\n */\nfunction Button(props) {\n  return <CoreButton color=\"primary\" {...props} />\n}\n\nexport default React.memo(Button)","export { default as TextField } from \"./TextField\"\nexport { default as Button } from \"./Button\"","import React from \"react\"\nimport { styled, Paper } from \"@material-ui/core\"\nimport { Done } from \"@material-ui/icons\"\nimport { TextField } from \"components\"\n\nexport const Container = styled(\"div\")({\n  height: \"100%\",\n  width: \"100%\",\n  display: \"grid\",\n  gridTemplateRows: \"1fr auto\",\n})\n\nexport const Input = styled(TextField)({\n  margin: \"0.5rem\",\n})\n\nexport const Box = styled(\"div\")({\n  overflowY: \"auto\",\n  wordBreak: \"break-word\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  margin: \"0.25rem\",\n})\n\nexport const DoneIcon = styled(\n  /**\n   * @param {import(\"@material-ui/core/SvgIcon\").SvgIconProps} props \n   */\n  function DoneIcon({ read, received, ...props }) {\n    return <Done {...props} />\n  }\n)(({ read, received }) => ({\n  position: \"relative\",\n  visibility: !received || read === false ? \"hidden\" : undefined,\n  gridArea: \"icon\",\n  top: read ? \"0.28rem\" : undefined,\n}))\n\nexport const Message = styled(\n  /**\n   * @param {import(\"@material-ui/core/Paper\").PaperProps} props \n   */\n  function Message({ local, ...props }) {\n    return <Paper {...props} />\n  }\n)(({ local }) => ({\n  position: \"relative\",\n  borderRadius: \"1rem\",\n  display: \"inline\",\n  margin: \"0.25rem\",\n  padding: \"1rem\",\n  alignSelf: local ? \"flex-end\" : \"flex-start\",\n  backgroundColor: local ? \"#FFFF80\" : \"inherit\",\n}))\n\nexport const Info = styled(\"span\")({\n  position: \"absolute\",\n  bottom: \"0.5rem\",\n  right: \"0.75rem\",\n  fontSize: \"0.75rem\",\n  color: \"grey\",\n})\n\nexport const InfoPlaceholder = styled(\"span\")({\n  width: \"3.5rem\",\n  display: \"inline-block\",\n})\n\nexport const IconContainer = styled(\"span\")({\n  position: \"relative\",\n  display: \"inline-grid\",\n  gridTemplateAreas: \"icon\",\n  marginLeft: \"0.1rem\",\n})","import { useMemo } from \"react\"\nimport useStore from \"hooks/useStore\"\n\nfunction useUserChats() {\n  const [chats] = useStore(\"chats\")\n  const [activeChat] = useStore(\"activeChat\")\n\n  return useMemo(() => Object.values(chats[activeChat.username] || {}), [chats, activeChat])\n}\n\nexport default useUserChats","import { useState, useRef, useLayoutEffect, useEffect } from \"react\"\nimport socket from \"libraries/socket\"\nimport useStore from \"hooks/useStore\"\nimport useUserChats from \"hooks/useUserChats\"\n\nfunction useLogic() {\n  const chatRef = useRef()\n  const scrolled = useRef(false)\n  const [message, setMessage] = useState(\"\")\n  const [activeChat] = useStore(\"activeChat\")\n  const setChat = useStore(\"chats\", false)\n  const [user] = useStore(\"user\")\n  const userChats = useUserChats()\n\n  useEffect(() => {\n    userChats.forEach(chat => {\n      if (chat.received && !chat.read && user === chat.to) {\n        socket.emit(\"read\", chat)\n      }\n    })\n  }, [userChats, setChat, user])\n\n  useLayoutEffect(() => {\n    if (!scrolled.current) chatRef.current.scrollTop = chatRef.current.scrollHeight - chatRef.current.offsetHeight\n  }, [userChats])\n\n  function handleKeyDown({ key }) {\n    if (message && key === \"Enter\") {\n      socket.emit(\"message\", { to: activeChat.username, message })\n      setMessage(\"\")\n    }\n  }\n\n  function handleChange({ target }) {\n    setMessage(target.value)\n  }\n\n  function handleScroll({ currentTarget: { scrollHeight, scrollTop, offsetHeight } }) {\n    scrolled.current = scrollTop !== scrollHeight - offsetHeight\n  }\n\n  return {\n    user,\n    handleScroll,\n    chatRef,\n    handleKeyDown,\n    message,\n    handleChange,\n    chat: userChats,\n  }\n}\n\nexport default useLogic","import React from \"react\"\nimport { format } from \"date-fns\"\nimport { Container, Input, Box, Message, DoneIcon, Info, IconContainer, InfoPlaceholder } from \"./styled\"\nimport useLogic from \"./useLogic\"\n\nfunction addMessage(user) {\n  return ({ from, message, received, read, date }, index) => {\n    return (\n      <Message\n        local={from === user}\n        key={index}>\n        {message}\n        <InfoPlaceholder />\n        <Info>\n          {format(date, \"HH:mm\")}\n          <IconContainer>\n            {user === from && <DoneIcon fontSize=\"inherit\" received={received} />}\n            {user === from && <DoneIcon fontSize=\"inherit\" received={received} read={read} />}\n          </IconContainer>\n        </Info>\n      </Message>\n    )\n  }\n}\n\nfunction Chat() {\n  const {\n    user,\n    handleScroll,\n    chatRef,\n    handleKeyDown,\n    message,\n    handleChange,\n    chat,\n  } = useLogic()\n\n  return (\n    <Container>\n      <Box\n        onScroll={handleScroll}\n        ref={chatRef}>\n        {chat.map(addMessage(user))}\n      </Box>\n      <Input\n        autoComplete=\"off\"\n        label=\"Mensaje\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        value={message}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown} />\n    </Container>\n  )\n}\n\nexport default React.memo(Chat)","import { styled } from \"@material-ui/core\"\nimport { ListItemText as CoreListItemText } from \"@material-ui/core\"\n\nexport const Container = styled(\"div\")({\n  height: \"100%\",\n  width: \"100%\",\n})\n\nexport const ListItemText = styled(CoreListItemText)({\n  overflow: \"hidden\",\n})","import { useEffect, useState } from \"react\"\nimport { get } from \"libraries/fetch\"\nimport useStore from \"hooks/useStore\"\n\nfunction useLogic() {\n  const [contacts, setContacts] = useStore(\"contacts\")\n  const [activeChat, setActiveChat] = useStore(\"activeChat\")\n  const [chats] = useStore(\"chats\")\n  const [user] = useStore(\"user\")\n  const [newChats, setNewChats] = useState({})\n\n  useEffect(() => {\n    const newChats = Object\n      .entries(chats)\n      .reduce((acc, [key, userChats]) => {\n        const chats = Object.values(userChats).reduce((acc, chat) => {\n          if (user === chat.from || chat.read) return { ...acc, last: chat.message }\n          return {\n            last: chat.message,\n            size: acc.size + 1,\n          }\n        }, { size: 0 })\n\n        return {\n          ...acc,\n          [key]: chats\n        }\n      }, {})\n\n    setNewChats(newChats)\n  }, [chats, user])\n\n  useEffect(() => {\n    async function fetchContacts() {\n      const { message } = await get(\"/user/contacts\")\n      setContacts(message)\n    }\n\n    if (!contacts) fetchContacts()\n  }, [contacts, setContacts])\n\n  function selectContact({ currentTarget }) {\n    setActiveChat({ open: true, username: currentTarget.dataset.value })\n  }\n\n  return { activeChat, selectContact, contacts, newChats }\n}\n\nexport default useLogic","import React from \"react\"\nimport { List, ListItem, ListItemSecondaryAction, Chip } from \"@material-ui/core\"\nimport Chat from \"components/Chat\"\nimport { Container, ListItemText } from \"./styled\"\nimport useLogic from \"./useLogic\"\n\nfunction addContact({ selectContact, newChats }) {\n  return ({ username }) => {\n    const userChats = newChats[username] || { last: <span>&nbsp;</span>, size: 0 }\n\n    return (\n      <ListItem\n        button\n        onClick={selectContact}\n        data-value={username}\n        key={username}>\n        <ListItemText primary={username} secondary={userChats.last} />\n        <ListItemSecondaryAction>\n          {userChats.size > 0 && <Chip label={userChats.size} color=\"primary\" />}\n        </ListItemSecondaryAction>\n      </ListItem>\n    )\n  }\n}\n\nfunction Contacts() {\n  const { contacts, selectContact, activeChat, newChats } = useLogic()\n\n  return (\n    <Container>\n      {activeChat.open\n        ? <Chat />\n        : (\n          <List>\n            {contacts && contacts.map(addContact({ selectContact, newChats }))}\n          </List>\n        )}\n    </Container>\n  )\n}\n\nexport default React.memo(Contacts)","import { styled, IconButton } from \"@material-ui/core\"\n\nexport const Box = styled(\"div\")({\n  height: \"100%\",\n  width: \"100%\",\n  position: \"absolute\",\n  display: \"grid\",\n  gridTemplateRows: \"auto 1fr\",\n  overflow: \"hidden\",\n})\n\nexport const Container = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  overflow: \"auto\",\n}))\n\nexport const Icon = styled(IconButton)({\n  marginRight: \"1rem\",\n})","import { useEffect } from \"react\"\nimport useStore from \"hooks/useStore\"\nimport socket from \"libraries/socket\"\n\nfunction useLogic() {\n  const [activeChat, setActiveChat] = useStore(\"activeChat\")\n  const addChat = useStore(\"chats\", false)\n  const [user] = useStore(\"user\")\n\n  useEffect(() => {\n    socket.connect()\n    socket.on(\"message\", message => {\n      addChat({ user, message })\n    })\n\n    return () => {\n      socket.off(\"message\")\n      socket.disconnect()\n    }\n  }, [user, addChat])\n\n  function closeChat() {\n    setActiveChat({ ...activeChat, open: false })\n  }\n\n  return { activeChat, closeChat }\n}\n\nexport default useLogic","import React from \"react\"\nimport Contacts from \"components/Contacts\"\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\"\nimport { ArrowBack } from \"@material-ui/icons\"\nimport { Box, Container, Icon } from \"./styled\"\nimport useLogic from \"./useLogic\"\n\nfunction Title({ children }) {\n  return <Typography variant=\"h6\">{children}</Typography>\n}\n\nfunction Home() {\n  const { activeChat, closeChat } = useLogic()\n\n  return (\n    <Box>\n      <AppBar position=\"sticky\">\n        <Toolbar variant=\"dense\">\n          {activeChat.open ? (\n            <>\n              <Icon\n                onClick={closeChat}\n                edge=\"start\"\n                color=\"inherit\">\n                <ArrowBack />\n              </Icon>\n              <Title>{activeChat.username}</Title>\n            </>\n          ) : <Title>BodyBook</Title>}\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Contacts />\n      </Container>\n    </Box>\n  )\n}\n\nexport default React.memo(Home)"],"sourceRoot":""}